// AdminPage.jsx
import React, { useState, useEffect } from 'react';
import QuestionForm from './QuestionForm';
import EditQuestionForm from './EditQuestionForm';
import * as api from '../api'; // Assuming you have an API file for handling server requests

const AdminPage = () => {
  const [selectedQuestion, setSelectedQuestion] = useState(null);
  const [questions, setQuestions] = useState([]);

  useEffect(() => {
    // Fetch questions when the component mounts
    const fetchQuestions = async () => {
      try {
        const data = await api.getQuestions(selectedVendor); // Replace with your API call to get questions
        setQuestions(data);
      } catch (error) {
        console.error('Error fetching questions:', error);
      }
    };

    fetchQuestions();
  }, []);

  const handleEdit = async (questionId) => {
    try {
      // Fetch the selected question
      const selectedQuestionData = await api.getQuestionById(questionId); // Replace with your API call to get a specific question
      setSelectedQuestion(selectedQuestionData);
    } catch (error) {
      console.error('Error fetching selected question:', error);
    }
  };

  const handleCancelEdit = () => {
    setSelectedQuestion(null);
  };

  const handleAddSubmit = async (data) => {
    try {
      // Logic to handle submission for adding a new question
      await api.addQuestion(selectedVendor, data); // Replace with your API call to add a new question

      // Refresh the list of questions
      const updatedQuestions = await api.getQuestions(selectedVendor); // Replace with your API call to get updated questions
      setQuestions(updatedQuestions);

      // Reset the form and clear selectedQuestion
      setSelectedQuestion(null);
    } catch (error) {
      console.error('Error adding question:', error);
    }
  };

  const handleEditSubmit = async (data) => {
    try {
      // Logic to handle submission for editing the question
      await api.editQuestion(selectedVendor, selectedQuestion.id, data); // Replace with your API call to edit a question

      // Refresh the list of questions
      const updatedQuestions = await api.getQuestions(selectedVendor); // Replace with your API call to get updated questions
      setQuestions(updatedQuestions);

      // Reset the form and clear selectedQuestion
      setSelectedQuestion(null);
    } catch (error) {
      console.error('Error editing question:', error);
    }
  };

  return (
    <div className="container mx-auto p-4">
      {/* Other content... */}

      {selectedQuestion ? (
        <EditQuestionForm onSubmit={handleEditSubmit} selectedQuestion={selectedQuestion} onCancel={handleCancelEdit} />
      ) : (
        <QuestionForm onSubmit={handleAddSubmit} />
      )}

      {/* Display the list of questions */}
      <ul>
        {questions.map((question) => (
          <li key={question.id}>
            {question.mainQuestion} -{' '}
            <button onClick={() => handleEdit(question.id)}>Edit</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default AdminPage;
